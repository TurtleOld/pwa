import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/task.dart';
import '../models/stage.dart';
import 'auth_service.dart';
import 'settings_service.dart';

class TaskService {
  final AuthService _authService = AuthService();
  final SettingsService _settingsService = SettingsService();

  Future<String> _getApiBaseUrl() async {
    return await _settingsService.getApiBaseUrl();
  }

  Future<Map<String, String>> _getHeaders() async {
    final token = await _authService.getTokenInfo();
    return {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      if (token['token'] != null) 'Authorization': 'Token ${token['token']}',
    };
  }

  Future<Task?> getTaskById(int taskId) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks/$taskId');
      final headers = await _getHeaders();
      final response = await http.get(url, headers: headers);
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return Task.fromJson(data);
      }
      return null;
    } catch (_) {
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
  Future<List<Task>> getTasks() async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks');
      final headers = await _getHeaders();

      final response = await http.get(url, headers: headers);

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((json) => Task.fromJson(json)).toList();
      } else {
        throw Exception(
          '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: ${response.statusCode} - ${response.body}',
        );
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã
  Future<List<Stage>> getStages() async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}stages');
      final headers = await _getHeaders();

      final response = await http.get(url, headers: headers);

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((json) => Stage.fromJson(json)).toList();
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API –¥–ª—è —ç—Ç–∞–ø–æ–≤, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        return _getDefaultStages();
      }
    } catch (e) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã
      return _getDefaultStages();
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  Future<Task> createTask({
    required String name,
    String? description,
    int? stage,
    int? executor,
    List<int>? labels,
    DateTime? deadline,
  }) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks');
      final headers = await _getHeaders();

      final body = {
        'name': name,
        if (description != null) 'description': description,
        if (stage != null) 'stage': stage,
        if (executor != null) 'executor': executor,
        if (labels != null) 'labels': labels,
        if (deadline != null) 'deadline': deadline.toIso8601String(),
      };

      final response = await http.post(
        url,
        headers: headers,
        body: json.encode(body),
      );

      if (response.statusCode == 201) {
        final data = json.decode(response.body);
        return Task.fromJson(data);
      } else {
        final errorData = json.decode(response.body);
        throw Exception(
          '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${_parseErrorMessage(errorData)}',
        );
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: $e');
    }
  }

  Future<Task> updateTask({
    required int taskId,
    String? name,
    String? description,
    int? stage,
    int? executor,
    List<int>? labels,
    DateTime? deadline,
    bool? state,
  }) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks/$taskId');
      final headers = await _getHeaders();

      final body = <String, dynamic>{};
      if (name != null) body['name'] = name;
      if (description != null) body['description'] = description;
      if (stage != null) body['stage'] = stage;
      if (executor != null) body['executor'] = executor;
      if (labels != null) body['labels'] = labels;
      if (deadline != null) body['deadline'] = deadline.toIso8601String();
      if (state != null) body['state'] = state;

      http.Response response;
      try {
        response = await http.patch(
          url,
          headers: headers,
          body: json.encode(body),
        );
      } catch (e) {
        // –í —Å–ª—É—á–∞–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
        final fallback = await getTaskById(taskId);
        if (fallback != null) return fallback;
        rethrow;
      }

      if (response.statusCode >= 200 && response.statusCode < 300) {
        if (response.body.isNotEmpty) {
          final data = json.decode(response.body);
          return Task.fromJson(data);
        }
        final fallback = await getTaskById(taskId);
        if (fallback != null) return fallback;
        throw Exception('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      } else {
        final errorData = json.decode(response.body);
        throw Exception(
          '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${_parseErrorMessage(errorData)}',
        );
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: $e');
    }
  }

  Future<void> deleteTask(int taskId) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks/$taskId');
      final headers = await _getHeaders();

      final response = await http.delete(url, headers: headers);

      if (response.statusCode != 204) {
        throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: $e');
    }
  }

  Future<Task> moveTaskToStage(int taskId, int newStageId) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks/$taskId');
      final headers = await _getHeaders();
      
      print('üîÑ Moving task $taskId to stage $newStageId');
      print('üåê API URL: $url');
      print('üìã Headers: $headers');

      final body = {'stage': newStageId};

      http.Response response;
      try {
        response = await http.patch(
          url,
          headers: headers,
          body: json.encode(body),
        );
      } catch (e) {
        // –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        final maybe = await getTaskById(taskId);
        if (maybe != null && maybe.stage == newStageId) {
          return maybe;
        }
        rethrow;
      }

      if (response.statusCode >= 200 && response.statusCode < 300) {
        if (response.body.isNotEmpty) {
          final data = json.decode(response.body);
          return Task.fromJson(data);
        }
        final maybe = await getTaskById(taskId);
        if (maybe != null) return maybe;
        throw Exception('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      } else {
        final errorData = json.decode(response.body);
        throw Exception(
          '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${_parseErrorMessage(errorData)}',
        );
      }
    } catch (e) {
      final errorMessage = _getNetworkErrorMessage(e);
      throw Exception('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: $errorMessage');
    }
  }

  Future<void> updateTaskOrder(int taskId, int newOrder) async {
    try {
      final apiBaseUrl = await _getApiBaseUrl();
      final url = Uri.parse('${apiBaseUrl}tasks/$taskId');
      final headers = await _getHeaders();

      final body = {'order': newOrder};

      final response = await http.patch(
        url,
        headers: headers,
        body: json.encode(body),
      );

      if (response.statusCode != 200) {
        throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: ${response.statusCode}');
      }
    } catch (e) {
      final errorMessage = _getNetworkErrorMessage(e);
      throw Exception('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞: $errorMessage');
    }
  }

  Future<List<Task>> getTasksByStage(int stageId) async {
    try {
      final allTasks = await getTasks();
      return allTasks.where((task) => task.stage == stageId).toList()
        ..sort((a, b) => a.order.compareTo(b.order));
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —ç—Ç–∞–ø—É: $e');
    }
  }

  Future<Map<String, int>> getTaskStats() async {
    try {
      final tasks = await getTasks();
      final stats = <String, int>{
        'total': tasks.length,
        'active': tasks.where((t) => !t.state).length,
        'completed': tasks.where((t) => t.state).length,
        'overdue': tasks.where((t) => t.isOverdue).length,
      };

      final stages = await getStages();
      for (final stage in stages) {
        final stageTasks = tasks.where((t) => t.stage == stage.id).length;
        stats['stage_${stage.name}'] = stageTasks;
      }

      return stats;
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  List<Stage> _getDefaultStages() {
    return [
      Stage(id: 1, name: 'to_do', order: 1),
      Stage(id: 2, name: 'in_progress', order: 2),
      Stage(id: 3, name: 'review', order: 3),
      Stage(id: 4, name: 'done', order: 4),
    ];
  }

  String _parseErrorMessage(Map<String, dynamic> errorData) {
    if (errorData.containsKey('non_field_errors')) {
      final errors = errorData['non_field_errors'] as List<dynamic>?;
      if (errors != null && errors.isNotEmpty) {
        return errors.first.toString();
      }
    }

    if (errorData.containsKey('name')) {
      final errors = errorData['name'] as List<dynamic>?;
      if (errors != null && errors.isNotEmpty) {
        return '–ù–∞–∑–≤–∞–Ω–∏–µ: ${errors.first}';
      }
    }

    if (errorData.containsKey('detail')) {
      return errorData['detail'].toString();
    }

    if (errorData.containsKey('error')) {
      return errorData['error'].toString();
    }

    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
  String _getNetworkErrorMessage(dynamic error) {
    final errorStr = error.toString().toLowerCase();

    if (errorStr.contains('failed to fetch') ||
        errorStr.contains('network error')) {
      return '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
    }

    if (errorStr.contains('connection refused') ||
        errorStr.contains('connection timed out')) {
      return '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }

    if (errorStr.contains('cors')) {
      return '–û—à–∏–±–∫–∞ CORS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.';
    }

    if (errorStr.contains('0.0.0.0')) {
      return '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (0.0.0.0 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)';
    }

    return error.toString();
  }
}
