import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class SettingsService {
  static const String _serverUrlKey = 'server_url';
  static const String _defaultServerUrl = 'http://0.0.0.0:8000';

  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  /// –ü–æ–ª—É—á–∏—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<String> getServerUrl() async {
    try {
      final serverUrl = await _storage.read(key: _serverUrlKey);
      print('üîß Stored server URL: $serverUrl');
      return serverUrl ?? _defaultServerUrl;
    } catch (e) {
      print('üîß Error reading server URL: $e, using default');
      return _defaultServerUrl;
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  Future<void> setServerUrl(String url) async {
    try {
      await _storage.write(key: _serverUrlKey, value: url.trim());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL —Å–µ—Ä–≤–µ—Ä–∞: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ URL —Å–µ—Ä–≤–µ—Ä–∞
  Future<bool> isServerUrlConfigured() async {
    try {
      final serverUrl = await _storage.read(key: _serverUrlKey);
      return serverUrl != null && serverUrl.isNotEmpty;
    } catch (e) {
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  Future<String> getApiBaseUrl() async {
    final serverUrl = await getServerUrl();
    final baseUrl = serverUrl.endsWith('/') ? serverUrl : '$serverUrl/';
    final apiUrl = '${baseUrl}api/';
    print('üåê Server URL: $serverUrl');
    print('üåê API Base URL: $apiUrl');
    return apiUrl;
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Å–µ—Ä–≤–µ—Ä–∞
  bool isValidServerUrl(String url) {
    if (url.isEmpty) return false;

    final trimmedUrl = url.trim();
    if (!trimmedUrl.startsWith('http://') &&
        !trimmedUrl.startsWith('https://')) {
      return false;
    }

    try {
      Uri.parse(trimmedUrl);
      return true;
    } catch (e) {
      return false;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  Future<void> clearSettings() async {
    try {
      await _storage.delete(key: _serverUrlKey);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
    }
  }
}
