import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'dart:html' as html;

class SettingsService {
  static const String _serverUrlKey = 'server_url';
  static const String _defaultServerUrl = 'http://localhost:8000';

  final FlutterSecureStorage _storage = const FlutterSecureStorage();

  Future<String> getServerUrl() async {
    try {
      final serverUrl = await _storage.read(key: _serverUrlKey);
      print('üîß Stored server URL: $serverUrl');
      return serverUrl ?? _getAutoServerUrl();
    } catch (e) {
      print('üîß Error reading server URL: $e, using default');
      return _getAutoServerUrl();
    }
  }

  Future<void> setServerUrl(String url) async {
    try {
      await _storage.write(key: _serverUrlKey, value: url.trim());
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL —Å–µ—Ä–≤–µ—Ä–∞: $e');
    }
  }

  Future<bool> isServerUrlConfigured() async {
    try {
      final serverUrl = await _storage.read(key: _serverUrlKey);
      return serverUrl != null && serverUrl.isNotEmpty;
    } catch (e) {
      return false;
    }
  }

  Future<String> getApiBaseUrl() async {
    final serverUrl = await getServerUrl();
    final baseUrl = serverUrl.endsWith('/') ? serverUrl : '$serverUrl/';
    final apiUrl = '${baseUrl}api/';
    print('üåê Server URL: $serverUrl');
    print('üåê API Base URL: $apiUrl');
    return apiUrl;
  }

  bool isValidServerUrl(String url) {
    if (url.isEmpty) return false;

    final trimmedUrl = url.trim();
    if (!trimmedUrl.startsWith('http://') &&
        !trimmedUrl.startsWith('https://')) {
      return false;
    }

    try {
      Uri.parse(trimmedUrl);
      return true;
    } catch (e) {
      return false;
    }
  }

  Future<void> clearSettings() async {
    try {
      await _storage.delete(key: _serverUrlKey);
    } catch (e) {
      throw Exception('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $e');
    }
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–º–µ–Ω–∞
  String _getAutoServerUrl() {
    try {
      final currentUrl = html.window.location;
      final protocol = currentUrl.protocol; // http: –∏–ª–∏ https:
      final hostname = currentUrl.hostname; // localhost, example.com, etc.
      final port = currentUrl.port;

      print('üîß Current location: $protocol//$hostname:$port');

      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (hostname == 'localhost' || hostname == '127.0.0.1') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ö–æ—Å—Ç, —á—Ç–æ –∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        return 'http://$hostname:8000';
      }

      // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω
      if (port == '80' || port == '443' || port == '') {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω –±–µ–∑ –ø–æ—Ä—Ç–∞
        return '$protocol//$hostname';
      } else {
        // –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ API –Ω–∞ —Ç–æ–º –∂–µ —Ö–æ—Å—Ç–µ, –ø–æ—Ä—Ç 8000
        return '$protocol//$hostname:8000';
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL —Å–µ—Ä–≤–µ—Ä–∞: $e');
      return _defaultServerUrl;
    }
  }
}
